package main
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

import (
	"fmt"
	"math/big"
)

func fibs(ch chan<- *big.Int) {
	nminus1 := big.NewInt(0)
	n := big.NewInt(1)
	for {
		nminus1.Add(n, nminus1)
		nminus1, n = n, nminus1
		ch <- n
	}
}

func main() {
	var n *big.Int
	sum := big.NewInt(0)
	limit := big.NewInt(4000000)
	ch := make(chan *big.Int, 0)
	go fibs(ch)
	for {
		n = <- ch 
		if n.Cmp(limit) > 0 {
			break
		} else if n.Bit(1) == 0 {
			sum.Add(sum, n)
		}
	}
	fmt.Println(sum)
}
